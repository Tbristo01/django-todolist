name: Pre-Production Workflow

on: [push, pull_request]

jobs:
  scanning:
    name: GitGuardian Scan
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - uses: GitGuardian/ggshield-action@v1.20.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  static-code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: scanning
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - uses: github/codeql-action/init@v2
        with:
          languages: "python,javascript"
      - uses: github/codeql-action/analyze@v2

  run-tests:
    name: Django Unit Tests
    runs-on: ubuntu-latest
    needs: [scanning, static-code-analysis]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          sudo systemctl start postgresql
          sudo -u postgres psql -c "CREATE USER django WITH PASSWORD 'django';"
          sudo -u postgres psql -c "ALTER USER django CREATEDB;"
          sudo -u postgres psql -c "CREATE DATABASE testdb WITH OWNER django;"
          python manage.py migrate
          python manage.py test
        env:
          DJANGO_DB_NAME: testdb
          DJANGO_DB_USER: django
          DJANGO_DB_PASSWORD: django
          DJANGO_DB_HOST: localhost
          DJANGO_DB_PORT: 5432
          DJANGO_SECRET_KEY: ${{ secrets.SECRET_KEY }}

  build-and-scan:
    name: Build and Scan Docker Image
    runs-on: ubuntu-latest
    needs: [scanning, static-code-analysis]
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - run: docker build -t my-django-app .
      - run: docker run -d -p 8000:8000 my-django-app
      - run: docker build -t docker.io/my-organization/my-app:${{ github.sha }} .
      - uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
        with:
          image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      - uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  publish-image:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: build-and-scan
    steps:
      - uses: actions/checkout@v2
      - uses: actions/setup-node@v2
        with:
          node-version: '16'
      - run: |
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
          docker build -t my-django-app .
          docker tag my-django-app tbristol01/django-todolist:latest
          docker push tbristol01/django-todolist:latest

  sanbox:
    runs-on: ubuntu-latest
    needs: [build-and-scan,publish-image]
    steps:
    - name: Checkout code
      uses: actions/checkout@v2

    - name: Deploy to Sanbox
      env:
        PRIVATE_KEY: ${{ secrets.EC2_SSH_PRIVATE_KEY }}
        HOST: 54.85.91.143  # EC2 instance's IP
        USER: ec2-user      # Replace with your EC2 instance's SSH username
      run: |
        # Save private key to a file
        echo "$PRIVATE_KEY" > private_key.pem
        chmod 600 private_key.pem
        # SSH into EC2 and pull latest Docker image and run it
        ssh -o StrictHostKeyChecking=no -i private_key.pem $USER@$HOST << 'ENDSSH'
          docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
          docker pull tbristol01/django-todolist:latest
          docker stop django-todolist || true
          docker rm django-todolist || true
          docker run -d -p 8000:8000 --name django-todolist tbristol01/django-todolist:latest
        ENDSSH
    - name: Display External URL
      run: |
        echo "Application can be accessed at: http:// 54.85.91.143:8000/"
        