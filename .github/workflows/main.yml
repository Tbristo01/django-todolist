name: Pre-Production Workflow

on: [push, pull_request]

jobs:
  scanning:
    name: GitGuardian Scan
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js v16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Checkout
        uses: actions/checkout@v2
      - name: GitGuardian scan
        id: gitguardian
        uses: GitGuardian/ggshield-action@v1.20.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}
      - name: Set scanning status
        id: set-status
        run: echo "scanning_status=${{ job.status }}" >> $GITHUB_ENV

  static-code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: scanning
    steps:
      - name: Set up Node.js v16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: "python,javascript"
      - name: Run CodeQL
        uses: github/codeql-action/analyze@v2
      - name: Set static-code-analysis status
        id: set-status
        run: echo "static_code_analysis_status=${{ job.status }}" >> $GITHUB_ENV

  run-tests:
      name: Django Unit Tests
      runs-on: ubuntu-latest
      needs: [scanning, static-code-analysis]
      steps:
        - name: Set up Node.js v16
          uses: actions/setup-node@v2
          with:
            node-version: '16'
        - name: Checkout code
          uses: actions/checkout@v2
        - name: Set up Python
          uses: actions/setup-python@v2
          with:
            python-version: 3.8
        - name: Install dependencies
          run: |
            python -m pip install --upgrade pip
            pip install -r requirements.txt
        - name: Set up Database
          run: |
            sudo systemctl start postgresql
            sudo -u postgres psql -c "CREATE USER django WITH PASSWORD 'django';"
            sudo -u postgres psql -c "ALTER USER django CREATEDB;"
            sudo -u postgres psql -c "CREATE DATABASE testdb WITH OWNER django;"
        - name: Run Django migrations
          run: python manage.py migrate
          env:
            DJANGO_SECRET_KEY: ${{ secrets.SECRET_KEY }}
        - name: Run Django tests
          run: python manage.py test
          env:
            DJANGO_DB_NAME: testdb
            DJANGO_DB_USER: django
            DJANGO_DB_PASSWORD: django
            DJANGO_DB_HOST: localhost
            DJANGO_DB_PORT: 5432
            DJANGO_SECRET_KEY: ${{ secrets.SECRET_KEY }}
      - name: Set run-tests status
        id: set-status
        run: echo "run_tests_status=${{ job.status }}" >> $GITHUB_ENV

  build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [scanning, static-code-analysis]
    steps:
      - name: Set up Node.js v16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build Docker image
        run: docker build -t my-django-app .
      - name: Run Docker Container
        run: |
          if docker run -d -p 8000:8000 my-django-app; then
            echo "Docker container started successfully."
          else
            echo "Failed to start Docker container."
            exit 1
          fi
      - name: Set build status
        id: set-status
        run: echo "build_status=${{ job.status }}" >> $GITHUB_ENV

  scan-image:
    name: Scan Docker Image
    runs-on: "ubuntu-20.04"
    needs: build
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Set up Node.js v16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build an image from Dockerfile
        run: docker build -t docker.io/my-organization/my-app:${{ github.sha }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
        with:
          image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'
      - name: Set scan-image status
        id: set-status
        run: echo "scan_image_status=${{ job.status }}" >> $GITHUB_ENV

  check-status:
    name: Check Status and Terminate on Failure
    runs-on: ubuntu-latest
    needs: [scanning, static-code-analysis, run-tests, build, scan-image]
    steps:
      - name: Check job statuses
        run: |
          if [[ "${{ needs.scanning.outputs.scanning_status }}" == "failure" || \
                "${{ needs.static-code-analysis.outputs.static_code_analysis_status }}" == "failure" || \
                "${{ needs.run-tests.outputs.run_tests_status }}" == "failure" || \
                "${{ needs.build.outputs.build_status }}" == "failure" || \
                "${{ needs.scan-image.outputs.scan_image_status }}" == "failure" ]]; then
            echo "One or more jobs failed. Terminating the workflow."
            exit 1
          else
            echo "All jobs succeeded."
          fi
