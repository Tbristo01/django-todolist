name: Pre-Production Workflow

on: [push, pull_request]

jobs:
  scanning:
    name: GitGuardian Scan
    runs-on: ubuntu-latest
    steps:
      - name: Set up Node.js v16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Checkout
        uses: actions/checkout@v2
      - name: GitGuardian scan
        id: gitguardian
        uses: GitGuardian/ggshield-action@v1.20.0
        env:
          GITHUB_PUSH_BEFORE_SHA: ${{ github.event.before }}
          GITHUB_PUSH_BASE_SHA: ${{ github.event.base }}
          GITHUB_DEFAULT_BRANCH: ${{ github.event.repository.default_branch }}
          GITGUARDIAN_API_KEY: ${{ secrets.GITGUARDIAN_API_KEY }}

  static-code-analysis:
    name: Static Code Analysis
    runs-on: ubuntu-latest
    needs: scanning
    steps:
      - name: Set up Node.js v16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Checkout repository
        uses: actions/checkout@v2
      - name: Initialize CodeQL
        uses: github/codeql-action/init@v2
        with:
          languages: "python,javascript"
      - name: Run CodeQL
        uses: github/codeql-action/analyze@v2

  run-tests:
    name: Django Unit Tests
    runs-on: ubuntu-latest
    needs: [scanning, static-code-analysis]
    steps:
      - name: Set up Node.js v16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: 3.8
      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
      - name: Set up Database
        run: |
          sudo systemctl start postgresql
          sudo -u postgres psql -c "CREATE USER django WITH PASSWORD 'django';"
          sudo -u postgres psql -c "ALTER USER django CREATEDB;"
          sudo -u postgres psql -c "CREATE DATABASE testdb WITH OWNER django;"
      - name: Run Django migrations
        run: python manage.py migrate
        env:
          DJANGO_SECRET_KEY: ${{ secrets.SECRET_KEY }} # Added this line for SECRET_KEY
      - name: Run Django tests
        run: python manage.py test
        env:
          DJANGO_DB_NAME: testdb
          DJANGO_DB_USER: django
          DJANGO_DB_PASSWORD: django
          DJANGO_DB_HOST: localhost
          DJANGO_DB_PORT: 5432
          DJANGO_SECRET_KEY: ${{ secrets.SECRET_KEY }} # Added this line for SECRET_KEY

  build:
    name: Docker Build
    runs-on: ubuntu-latest
    needs: [scanning, static-code-analysis]
    steps:
      - name: Set up Node.js v16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build Docker image
        run: docker build -t my-django-app .
      - name: Run Docker Container
        run: |
          if docker run -d -p 8000:8000 my-django-app; then
            echo "Docker container started successfully."
          else
            echo "Failed to start Docker container."
            exit 1
          fi
  scan-image:
    name: Scan Docker Image
    runs-on: "ubuntu-20.04"
    needs: build
    permissions:
      contents: read
      security-events: write
    steps:
      - name: Set up Node.js v16
        uses: actions/setup-node@v2
        with:
          node-version: '16'
      - name: Checkout code
        uses: actions/checkout@v2
      - name: Build an image from Dockerfile
        run: docker build -t docker.io/my-organization/my-app:${{ github.sha }} .
      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@7b7aa264d83dc58691451798b4d117d53d21edfe
        with:
          image-ref: 'docker.io/my-organization/my-app:${{ github.sha }}'
          format: 'template'
          template: '@/contrib/sarif.tpl'
          output: 'trivy-results.sarif'
          severity: 'CRITICAL,HIGH'
      - name: Upload Trivy scan results to GitHub Security tab
        uses: github/codeql-action/upload-sarif@v2
        with:
          sarif_file: 'trivy-results.sarif'

  publish-image:
    name: Publish Docker Image
    runs-on: ubuntu-latest
    needs: scan-image
    steps:
      - name: Set up Node.js v16
        uses: actions/setup-node@v2
        with:
          node-version: '16'

      - name: Checkout code
        uses: actions/checkout@v2

      - name: Build Docker image
        run: docker build -t my-django-app .
      
      - name: Login to DockerHub
        run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_ACCESS_TOKEN }}
      
      - name: Tag Docker image
        run: docker tag my-django-app tbristol01/django-todolist:latest

      - name: Push Docker image to DockerHub
        run: docker push tbristol01/django-todolist:latest

  provision-ec2:
    runs-on: ubuntu-latest
    needs: publish-image
    steps:
      - uses: actions/checkout@v3
      - uses: actions/setup-node@v3
        with:
          node-version: '16'
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: '${{ secrets.TF_USER_AWS_KEY }}'
          aws-secret-access-key: '${{ secrets.TF_USER_AWS_SECRET }}'
          aws-region: us-east-2
      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2
        with:
          terraform_wrapper: false
      - name: Terraform Apply
        id:   apply
        env:
          TF_VAR_ec2_name:  "${{ github.event.inputs.ec2_name }}"
        run: |
          terraform init
          terraform validate
          terraform plan 
          terraform apply -auto-approve